let os = import('std/os');
let vec = import('std/vec');

let context = import('./context');

let addLibBase =
`# {self.libName}
set(mod "{self.libName}")
add_library($\\{mod} SHARED "$\\{PROJECT_SOURCE_DIR}/src/$\\{mod}.cpp" {self.sources})
target_include_directories($\\{mod} PRIVATE $\\{PROJECT_SOURCE_DIR}/include)
target_link_libraries($\\{mod}{depNames})
set_target_properties($\\{mod}
    PROPERTIES
    PREFIX "libferal"
    ARCHIVE_OUTPUT_NAME "libferal$\\{mod}"
    LINK_FLAGS "$\\{EXTRA_LD_FLAGS}"
    LIBRARY_OUTPUT_DIRECTORY "$\\{CMAKE_BINARY_DIR}/lib/$<0:>" # for so (non-windows)
    RUNTIME_OUTPUT_DIRECTORY "$\\{CMAKE_BINARY_DIR}/lib/$<0:>" # for dll (windows)
    ARCHIVE_OUTPUT_DIRECTORY "$\\{CMAKE_BINARY_DIR}/lib/$<0:>" # for lib (windows)
    INSTALL_RPATH_USE_LINK_PATH TRUE
)
install(TARGETS $\\{mod}
	RUNTIME_DEPENDENCY_SET RTDS_LIB_$\\{mod}
	LIBRARY
	  DESTINATION "{context.pkgInstallPath}/{context.pkgNameLower}$<0:>"
	ARCHIVE
	  DESTINATION "{context.pkgInstallPath}/{context.pkgNameLower}$<0:>"
	RUNTIME
	  DESTINATION "{context.pkgInstallPath}/{context.pkgNameLower}$<0:>"
)
{libDLLInstall}`;

# for FindPkg dependencies
let libDLLInstallBase =
`install(RUNTIME_DEPENDENCY_SET RTDS_LIB_$\\{mod}
	PRE_INCLUDE_REGEXES
	  {pkgDLLRegexes}
	PRE_EXCLUDE_REGEXES
	  ".*"
	LIBRARY
	  DESTINATION "{context.pkgInstallPath}/{context.pkgNameLower}$<0:>"
	RUNTIME
	  DESTINATION "{context.pkgInstallPath}/{context.pkgNameLower}$<0:>"
)`;

let AddLibrary = struct(
	libName = 'test',
	sources = '',
	deps = vec.new(refs = true)
);
AddLibrary.setTypeName('AddLibrary');

let new = fn(name, srcs...) {
	return AddLibrary(libName = name).addSources(srcs...);
};

let addSources in AddLibrary = fn(srcs...) {
	for src in srcs.each() {
		self.sources += ' ${PROJECT_SOURCE_DIR}/src/';
		self.sources += src;
	}
	return ref(self);
};

let dependsOn in AddLibrary = fn(deps...) {
	for dep in deps.each() {
		self.deps.push(dep);
	}
	return ref(self);
};

let build in AddLibrary = fn() {
	let depNames = '';
	let pkgDLLRegexes = ' ';
	for d in self.deps.each() {
		depNames += ' ' + d.getName();
		if os.name == 'windows' && d._typestr_() == 'FindPackage' {
			let depList = d.getVCPkgDependenceList();
			for dep in depList.each() {
				pkgDLLRegexes += '".*' + dep + '.*" ';
			}
		}
	}
	pkgDLLRegexes.pop(); # remove the space at the end
	let libDLLInstall = '';
	if os.name == 'windows' {
		libDLLInstall = libDLLInstallBase.fmt();
	}
	return addLibBase.fmt();
};

let getName in AddLibrary = fn() {
	return self.libName;
};