# Add extra CMAKE_PREFIX_PATH using environment variable: EXTRA_CMAKE_PREFIXES

let template =
`cmake_minimum_required(VERSION {context.cmakeVersion})

project({context.pkgName} C CXX)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

message("-- Install messages are now lazily shown")
set(CMAKE_INSTALL_MESSAGE LAZY)

set(SOURCE_VERSION "{context.pkgVersion}")

set(CMAKE_INSTALL_PREFIX "{context.pkgInstallPath}")
message("-- Using CMAKE_INSTALL_PREFIX = $\\{CMAKE_INSTALL_PREFIX}")
set(CMAKE_PREFIX_PATH "{feral.installPath}/external;$\\{CMAKE_BINARY_DIR};$\\{CMAKE_PREFIX_PATH};$ENV\\{EXTRA_CMAKE_PREFIXES}")
set(CMAKE_MODULE_PATH "$\\{PROJECT_SOURCE_DIR}/external;{feral.installPath}/external;$ENV\\{EXTRA_CMAKE_PREFIXES}")
include_directories("$\\{CMAKE_SOURCE_DIR}/include" "{feral.installPath}/include/feral")

set(CMAKE_BUILD_WITH_INSTALL_NAME_DIR TRUE)
if(WIN32)
	set(WIN_LIB_PREFIX "lib")
	link_directories("$\\{CMAKE_BINARY_DIR}/bin" "$\\{CMAKE_BINARY_DIR}/lib"
			"$\\{CMAKE_INSTALL_PREFIX}/bin" "$\\{CMAKE_INSTALL_PREFIX}/{context.pkgNameLower}"
			"{feral.installPath}/lib/feral" "{feral.installPath}/bin")
	# This makes the debug information embedded in object file, therefore multiple files can be compiled simultaneously.
	# If it is not present, cmake defaults to ProgramDatabase which causes all sources in parallel to attempt accessing
	# a single file which is something like vc143.pdb, therefore causing the compilation to fail.
	# https://cmake.org/cmake/help/latest/variable/CMAKE_MSVC_DEBUG_INFORMATION_FORMAT.html
	set(CMAKE_MSVC_DEBUG_INFORMATION_FORMAT "$<$<CONFIG:Debug,RelWithDebInfo>:Embedded>")
	message("-- Set CMake MSVC debug information format to: $<$<CONFIG:Debug,RelWithDebInfo>:Embedded>")
	# disable deprecated warnings on Windows
	if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
		add_compile_options("-Wno-deprecated-declarations")
	endif()

	# Must have vcpkg installed on Windows to use third party libraries
	if(NOT DEFINED ENV\\{VCPKG_ROOT} OR "$ENV\\{VCPKG_ROOT}" STREQUAL "")
		message(FATAL_ERROR "Could not find vcpkg. Ensure it is installed and $VCPKG_ROOT environment variable is set.")
	endif()
	set(VCPKG_CRT_LINKAGE "dynamic")
	set(VCPKG_LIBRARY_LINKAGE "dynamic")
	message("-- Loading vcpkg cmake: $ENV\\{VCPKG_ROOT}\\\\scripts\\\\toolchains\\\\windows.cmake")
	include("$ENV\\{VCPKG_ROOT}\\\\scripts\\\\buildsystems\\\\vcpkg.cmake")

	if("${CCACHE_PROGRAM}" STREQUAL "")
		find_program(CCACHE_PROGRAM sccache)
	endif()
else()
	set(ORIGIN "$ORIGIN")
	if(APPLE)
		set(ORIGIN "@loader_path")
		set(CMAKE_MACOSX_RPATH TRUE)
	endif()
	list(APPEND CMAKE_INSTALL_RPATH "$\\{ORIGIN}/../lib/feral" "$\\{ORIGIN}/.." "$\\{ORIGIN}/.")
	set(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)
	set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
	if("${CCACHE_PROGRAM}" STREQUAL "")
		find_program(CCACHE_PROGRAM ccache)
	endif()
endif()
if(CCACHE_PROGRAM)
	set(CMAKE_C_COMPILER_LAUNCHER "${CCACHE_PROGRAM}")
	set(CMAKE_CXX_COMPILER_LAUNCHER "${CCACHE_PROGRAM}")
	message("-- Using ccache: ${CCACHE_PROGRAM}")
endif()
# For macOS and BSD
if(APPLE OR $\\{CMAKE_SYSTEM_NAME} MATCHES ".*BSD.*")
	include_directories(/usr/local/include)
	if(NOT APPLE)
		add_definitions(-D_WITH_GETLINE)
	endif()
endif()
# Because Android has issues with dlopen()'s RTLD_GLOBAL; See:
# https://android.googlesource.com/platform/bionic/+/master/android-changes-for-ndk-developers.md#changes-to-library-search-order
# https://android.googlesource.com/platform/bionic/+/30b17e32f0b403a97cef7c4d1fcab471fa316340/linker/linker_namespaces.cpp#100
# https://android-ndk.narkive.com/iNWj05IV/weak-symbol-linking-when-loading-dynamic-libraries
if(ANDROID)
	set(EXTRA_LD_FLAGS "-z global")
endif()

string(TIMESTAMP BUILD_DATE "%a %b %d, %Y at %H:%M:%S")

if(EXISTS "$\\{CMAKE_SOURCE_DIR}/.git")
	execute_process(COMMAND git config --get remote.origin.url OUTPUT_VARIABLE REPO_URL OUTPUT_STRIP_TRAILING_WHITESPACE)
	execute_process(COMMAND git log --format=%H -n 1 OUTPUT_VARIABLE COMMIT_ID OUTPUT_STRIP_TRAILING_WHITESPACE)
	execute_process(COMMAND git diff --quiet RESULT_VARIABLE ret)
	if(ret EQUAL 0)
		set(TREE_STATUS "Clean")
	else()
		set(TREE_STATUS "Dirty")
	endif()
endif()

include(CheckCXXCompilerFlag)

set(CMAKE_THREAD_PREFER_PTHREAD TRUE)
set(THREADS_PREFER_PTHREAD_FLAG ON)
find_package(Threads REQUIRED)
if(CMAKE_USE_PTHREADS_INIT)
	message("-- Using thread flags: -pthread")
	set(CMAKE_CXX_FLAGS  "$\\{CMAKE_CXX_FLAGS} -pthread")
	set(CMAKE_EXE_LINKER_FLAGS  "$\\{CMAKE_EXE_LINKER_FLAGS} -pthread")
else()
	message("-- Using thread flags: $\\{CMAKE_THREAD_LIBS_INIT}")
	set(CMAKE_CXX_FLAGS  "$\\{CMAKE_CXX_FLAGS} $\\{CMAKE_THREAD_LIBS_INIT}")
	set(CMAKE_EXE_LINKER_FLAGS  "$\\{CMAKE_EXE_LINKER_FLAGS} $\\{CMAKE_THREAD_LIBS_INIT}")
endif()

# Generally, disabled for CI purposes
# Also needed when running valgrind as valgrind does not support instruction bytes for Vector<bool>
if(NOT DEFINED ENV\\{DISABLE_MARCH_NATIVE} OR "$ENV\\{DISABLE_MARCH_NATIVE}" STREQUAL "")
	check_cxx_compiler_flag(-march=native COMPILER_SUPPORTS_MARCH_NATIVE)
	if(COMPILER_SUPPORTS_MARCH_NATIVE)
		set(CMAKE_CXX_FLAGS "$\\{CMAKE_CXX_FLAGS} -march=native")
	endif()
endif()

# Force DWARF4 as valgrind does not support anything newer (clang-14 defaults to DWARF5).
if(NOT CMAKE_BUILD_TYPE STREQUAL "Release")
	check_cxx_compiler_flag(-gdwarf-4 COMPILER_SUPPORTS_GDWARF4)
	if(COMPILER_SUPPORTS_GDWARF4)
		set(CMAKE_CXX_FLAGS "$\\{CMAKE_CXX_FLAGS} -gdwarf-4")
	endif()
endif()

# Enable code coverage
if(CMAKE_COMPILER_IS_GNUCXX AND DEFINED WITH_COVERAGE)
    set(WITH_COVERAGE "-D_WITH_COVERAGE")
    include(CodeCoverage)
    APPEND_COVERAGE_COMPILER_FLAGS()
    setup_target_for_coverage_gcovr_html(NAME feral_cov EXECUTABLE $\\{PROJECT_SOURCE_DIR}/codecov.sh $\\{PROJECT_SOURCE_DIR})
endif()

# Finally! The actual project/package stuff!!!!!

# Install headers/modules
install(DIRECTORY "$\\{CMAKE_SOURCE_DIR}/include/"
	DESTINATION "$\\{CMAKE_INSTALL_PREFIX}/{context.pkgNameLower}"
)

# Install binaries if any
if(EXISTS "{context.pkgBinaryPath}")
	install(DIRECTORY "{context.pkgBinaryPath}/"
		DESTINATION "$\\{CMAKE_INSTALL_PREFIX}/bin"
	)
endif()

# The binaries are symlinked by the builder once the make install step is run.

# Dependencies

{depsStr}

# Libraries

{libsStr}`;