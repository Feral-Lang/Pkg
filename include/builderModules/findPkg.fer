let fs = import('std/fs');
let os = import('std/os');
let vec = import('std/vec');

let context = import('./context');

let findPkgBase =
`if(NOT "{includeDirs}" MATCHES "")
	include_directories({includeDirs})
endif()
find_package({self.pkgName} {self.pathSuffixes}{self.required}{prefixPath})
`;

let findPkgTest =
`if({self.pkgName}_FOUND)
	message("-- {self.pkgName} found at: $\\{{self.pkgName}_LIBRARIES}")
endif()
`;

let FindPackage = struct(
	template = findPkgBase,
	pkgName = 'test',
	targetName = '',
	required = '',
	pathSuffixes = '',
	extPrefixes = vec.new()
);
FindPackage.setTypeName('FindPackage');

let new = fn(pkgName) { return FindPackage(pkgName = pkgName); };

let makeRequired in FindPackage = fn() {
	self.required = ' REQUIRED';
	self.template += findPkgTest;
	return ref(self);
};

let setTargetName in FindPackage = fn(targetName) { self.targetName = targetName; return ref(self); };

let addPathSuffixes in FindPackage = fn(pathSuffixes...) {
	for pathSuffix in pathSuffixes.each() {
		self.pathSuffixes += pathSuffix;
	}
	return ref(self);
};

let getName in FindPackage = fn() {
	if !self.targetName.empty() {
		return self.targetName;
	}
	return self.pkgName.upper();
};

let addExtPrefixes in FindPackage = fn(extPrefixes...) {
	for extPrefix in extPrefixes.each() {
		self.extPrefixes.push(extPrefix);
	}
	return ref(self);
};

let build in FindPackage = fn() {
	if self.targetName == '' { self.targetName = self.pkgName; }
	if !self.pathSuffixes.empty() { self.pathSuffixes = ' PATH_SUFFIXES "' + self.pathSuffixes + '"'; }
	let includeDirs = '';
	let prefixPath = ' PATHS ';
	for prefix in self.extPrefixes.each() {
		includeDirs += prefix + '/include ';
		prefixPath += prefix + '/lib ';
	}
	if !self.extPrefixes.empty() {
		includeDirs.pop();
	}
	if prefixPath == ' PATHS ' {
		prefixPath.clear();
	}
	if !prefixPath.empty() {
		prefixPath += 'NO_DEFAULT_PATH';
	}
	return self.template.fmt();
};

inline if os.name == 'windows' {
let vcpkg = os.getEnv('VCPKG_ROOT');
if vcpkg == nil {
	raise('vcpkg is required for building on Windows');
}
let vcpkgBin = fs.pathFrom(vcpkg, 'vcpkg.exe');
let getVCPkgDependenceList in FindPackage = fn() {
	let outLines = vec.new(refs = true);
	if os.exec(vcpkgBin, '--triplet', 'x64-windows', 'depend-info', self.pkgName, '^2>&1', out = outLines) != 0 {
		raise('Failed to get vcpkg dependence info for pkg: ', self.pkgName);
	}
	let list = vec.new(refs = true);
	for line in outLines.each() {
		let lsplit = line.split('[:');
		if lsplit.empty() { continue; }
		if lsplit[0].find('vcpkg') >= 0 { continue; }
		list.push(lsplit[0]);
	}
	return list;
};
}