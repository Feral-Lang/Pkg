let io = import('std/io');
let fs = import('std/fs');
let os = import('std/os');
let vec = import('std/vec');
let mproc = import('std/multiproc');
let logging = import('std/logging');
let platform = import('std/platform');

let base = import('./builderModules/base');
let addLib = import('./builderModules/addLib');
let context = import('./builderModules/context');
let findLib = import('./builderModules/findLib');
let findPkg = import('./builderModules/findPkg');

#############################################################################################################

let Builder = struct(
	deps = vec.new(refs = true),
	libs = vec.new(refs = true)
);
Builder.setTypeName('Builder');

let builderInstance = Builder();
builderInstance.deps.push(findLib.feralLib);

let get = fn() { return ref(builderInstance); };

#############################################################################################################

# These functions are used by pkg - for project setup.

let setBuildInfo = fn(pkgName, pkgVersion, pkgSourcePath, pkgInstallPath, pkgDependencyPaths, task) {
	context.pkgName = pkgName;
	context.pkgNameLower = pkgName.lower();
	context.pkgVersion = pkgVersion;
	context.pkgSourcePath = pkgSourcePath;
	context.pkgInstallPath = pkgInstallPath;
	context.pkgBuildPath = fs.pathFrom(context.pkgSourcePath, 'build');
	context.pkgBinaryPath = fs.pathFrom(context.pkgSourcePath, 'bin');
	context.pkgBinaryInstallPath = fs.pathFrom(context.pkgInstallPath, 'bin');
	context.pkgDependencyPaths = pkgDependencyPaths;
	context.task = task;
};

let build = fn() {
	let ehWhatever = import(fs.pathFrom(context.pkgSourcePath, 'build')) or e {
		io.ecprintln('{r}Unable to import build script of the package:{0} ', e);
		return nil;
	};
	if ehWhatever == nil { return false; }
	if !get().build() {
		io.ecprintln('{r}Builder for package: ', context.pkgName, ' failed!{0}');
		return false;
	}
	return true;
};

let run = fn(source) {
	let envMap = map.new(refs = true);
	envMap.insert('FERAL_PATHS', context.pkgDependencyPaths.join(os.envDelimiter));
	os.exec(feral.binaryPath, fs.pathFrom(context.pkgSourcePath, source + '.fer', env = envMap));
};

#############################################################################################################

let build in Builder = fn() {
	let cmakeListsPath = fs.pathFrom(context.pkgSourcePath, 'CMakeLists.txt');
	let cmakeCachePath = fs.pathFrom(context.pkgBuildPath, 'CMakeCache.txt');

	let depsStr = '';
	for d in self.deps.each() {
		depsStr += d.build() + '\n';
	}
	let libsStr = '';
	for l in self.libs.each() {
		libsStr += l.build() + '\n';
	}

	{
		# this is inside a block as file must be closed before it is used in cmake command
		let data = base.template.fmt();
		let file = fs.fopen(fs.pathFrom(cmakeListsPath), 'w+');
		io.fprintln(file, data);
	}

	let cmakeFileChanged = false;
	# forces cmake to always execute and ignore grep command on windows
	if os.name == 'windows' && fs.exists(cmakeCachePath) {
		fs.remove(context.pkgBuildPath);
	}
	if !fs.exists(cmakeCachePath) {
		fs.mkdir(context.pkgBuildPath);
		cmakeFileChanged = true;
	} elif os.exec('grep', 'CMAKE_BUILD_TYPE', cmakeCachePath, '^|', 'grep', context.pkgBuildType, '^>/dev/null', '^2>&1') != 0 {
		fs.remove(context.pkgBuildPath);
		fs.mkdir(context.pkgBuildPath);
		cmakeFileChanged = true;
	}

	let cwd = os.getCWD();
	defer os.setCWD(cwd);
	os.setCWD(context.pkgBuildPath);

	let outLines = vec.new(refs = true);
	if cmakeFileChanged {
		logging.trace('Running cmake ...');
		let cmakeCmd = self.getCMakeCmd(cmakeListsPath);
		outLines.clear();
		let res = os.exec(cmakeCmd, out = outLines);
		for o in outLines.each() {
			logging.info('-- ', o);
		}
		if res != 0 {
			logging.fatal('Failed to execute cmake!');
			io.ecprintln('{r}Failed to execute cmake!{0}');
			return false;
		}
	}

	logging.trace('Running make ...');
	let makeCmd = self.getMakeCmd();
	if makeCmd == nil {
		logging.fatal('Failed to generate make command');
		io.ecprintln('{r}Failed to generate make command!{0}');
		return false;
	}
	outLines.clear();
	let res = os.exec(makeCmd, out = outLines);
	for o in outLines.each() {
		logging.info('-- ', o);
	}
	if res != 0 {
		logging.fatal('Failed to execute make!');
		io.ecprintln('{r}Failed to execute make!{0}');
		return false;
	}

	if context.task != 'install' { return true; }
	if fs.exists(context.pkgBinaryInstallPath) {
		let files = fs.walkDir(context.pkgBinaryInstallPath);
		for src in files.each() {
			let dest = fs.pathFrom(feral.installPath, 'bin', fs.fmtWithPath('$f', src));
			fs.mklink(src, dest);
			logging.info('Installed binary (created symlink): ', dest, ' -> ', src);
			io.cprintln('Installed binary: {g}', dest, '{0} -> {g}', src, '{0}');
		}
	}
	return true;
};

let findLibrary in Builder = fn(name) {
	let lib = findLib.new(name);
	self.deps.push(lib);
	return ref(lib);
};

let addSystemLibrary in Builder = fn(name) {
	let pkg = findPkg.new(name);
	self.deps.push(pkg);
	return ref(pkg);
};

let addLibrary in Builder = fn(name, srcs...) {
	let lib = addLib.new(name, srcs...);
	lib.dependsOn(findLib.feralLib);
	self.libs.push(lib);
	return ref(lib);
};

let addRPath in Builder = fn(rpath) { self.installRPaths += ';' + rpath; return ref(self); };

let setRelativeRPath in Builder = fn(rpathFromOrigin) { self.rpathFromOrigin = rpathFromOrigin; return ref(self); };

let setPrefix in Builder = fn(prefix) { self.prefix = prefix; return ref(self); };

let getCMakeCmd in Builder = fn(cmakeListsPath) {
	let cmd = vec.new(refs = true, 'cmake', cmakeListsPath, '--no-warn-unused-cli',
			  '-DDISABLE_INSTALL_MSG=true', '-DCMAKE_EXPORT_COMPILE_COMMANDS=true',
			  '-DCMAKE_BUILD_TYPE=' + context.pkgBuildType);
	if os.name == 'windows' {
		cmd.push('-DCMAKE_WINDOWS_EXPORT_ALL_SYMBOLS=true');
	}
	cmd.push('^2>&1');
	return cmd;
};

let getMakeCmd in Builder = fn() {
	let cmd = vec.new(refs = true);
	if os.name == 'windows' {
		let msbuild = platform.getMSBuildPath();
		if msbuild.empty() {
			io.ecprintln('{r}msbuild not found. Cannot build project!{0}');
			return nil;
		}
		cmd.push(msbuild, '/p:CL_MPCount=2', '/p:Configuration=' + context.pkgBuildType,
			 '-m:' + mproc.getConcurrency().str());
	} else {
		cmd.push('make', '-j');
	}
	let suffix = '';
	if os.name == 'windows' { suffix = '.\\ALL_BUILD.vcxproj'; }
	if context.task == 'install' {
		if os.name == 'windows' { suffix = '.\\INSTALL.vcxproj'; }
		else { suffix = 'install'; }
	} elif context.task == 'build' || context.task == 'run' {
		if os.name == 'windows' { suffix = '.\\ALL_BUILD.vcxproj'; }
	}
	if !suffix.empty() { cmd.push(suffix); }
	cmd.push('^2>&1');
	return cmd;
};