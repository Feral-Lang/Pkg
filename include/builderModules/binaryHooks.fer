let io = import('std/io');
let fs = import('std/fs');

let context = import('./context');

let template =
`let pkg = import('pkg/pkg');

pkg.addModuleFinderPaths({self.dependencyPaths});

import('bin/{self.binaryName}');
`;

let BinaryHook = struct(
	binaryName = '',
	dependencyPaths = ''
);
BinaryHook.setTypeName('BinaryHook');

let new = fn(binaryName, dependencyPathList) {
	let hook = BinaryHook(binaryName = binaryName);
	for path in dependencyPathList.each() {
		hook.dependencyPaths += '\'' + path + '\', ';
	}
	if !hook.dependencyPaths.empty() {
		hook.dependencyPaths.pop();
		hook.dependencyPaths.pop();
	}
	return hook;
};

let build in BinaryHook = fn() {
	let binaryHookData = template.fmt();
	let binaryHookFile = fs.fopen(fs.pathFrom(context.pkgBinaryBuildPath, self.binaryName + '.fer'), 'w+');
	io.fprintln(binaryHookFile, binaryHookData);
	return true;
};