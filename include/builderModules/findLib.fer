let os = import('std/os');
let vec = import('std/vec');

let findLibBase =
`if(NOT "{includeDirs}" MATCHES "")
	include_directories({includeDirs})
endif()
find_library({self.libName.upper()}_LIBRARY $\\{WIN_LIB_PREFIX}{self.libName}{self.pathSuffixes}{self.required}{prefixPath})
`;

let findLibTest =
`if({self.libName.upper()}_LIBRARY)
	message("-- {self.libName} found at: $\\{{self.libName.upper()}_LIBRARY}")
endif()
`;

let FindLib = struct(
	template = findLibBase,
	libName = '',
	required = '',
	# Use this to search for a library in paths (suffixes) within extPrefixes (which generates prefixPath - paths where to search for the library)
	pathSuffixes = '',
	extPrefixes = vec.new(),
	feralLib = false
);
FindLib.setTypeName('FindLib');

let new = fn(libName) { return FindLib(libName = libName); };

let makeRequired in FindLib = fn() {
	self.required = ' REQUIRED';
	self.template += findLibTest;
	return ref(self);
};

let addPathSuffixes in FindLib = fn(pathSuffixes...) {
	for pathSuffix in pathSuffixes.each() {
		self.pathSuffixes += pathSuffix;
	}
	return ref(self);
};

let getName in FindLib = fn() {
	return '${' + self.libName.upper() + '_LIBRARY}';
};

let addExtPrefixes in FindLib = fn(extPrefixes) {
	for extPrefix in extPrefixes.each() {
		self.extPrefixes.push(extPrefix);
	}
	return ref(self);
};

# Adds a 'feral' prefix to the library name and adds feral.installPath + '/lib/feral ' to the prefixPath
let makeFeralLib in FindLib = fn() { self.feralLib = true; return ref(self); };

let build in FindLib = fn() {
	if !self.pathSuffixes.empty() { self.pathSuffixes = ' PATH_SUFFIXES "' + self.pathSuffixes + '"'; }
	let includeDirs = '';
	let prefixPath = ' PATHS ';
	for prefix in self.extPrefixes.each() {
		includeDirs += '"' + prefix + '/include" ';
		prefixPath += '"' + prefix + '/lib" ';
	}
	if !self.extPrefixes.empty() {
		includeDirs.pop();
	}
	if self.feralLib {
		prefixPath += '"' + feral.installPath + '/lib/feral" ';
		if os.name == 'windows' {
			# libferal.{dll,lib} are in the same folder as feral binary.
			prefixPath += '"' + feral.installPath + '/bin" ';
		}
		self.libName = 'feral' + self.libName;
	}
	if prefixPath == ' PATHS ' {
		prefixPath.clear();
	}
	if !prefixPath.empty() {
		prefixPath += 'NO_DEFAULT_PATH';
	}
	return self.template.fmt();
};

# Feral library
let feralLib = new('');
feralLib.makeRequired().makeFeralLib();